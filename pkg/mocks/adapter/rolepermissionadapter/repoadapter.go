// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adityarev/go-be-starter-2/pkg/core/adapter/rolepermissionadapter (interfaces: RepoAdapter)

// Package mock_rolepermissionadapter is a generated GoMock package.
package mock_rolepermissionadapter

import (
	context "context"
	types "twatter/pkg/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepoAdapter is a mock of RepoAdapter interface
type MockRepoAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockRepoAdapterMockRecorder
}

// MockRepoAdapterMockRecorder is the mock recorder for MockRepoAdapter
type MockRepoAdapterMockRecorder struct {
	mock *MockRepoAdapter
}

// NewMockRepoAdapter creates a new mock instance
func NewMockRepoAdapter(ctrl *gomock.Controller) *MockRepoAdapter {
	mock := &MockRepoAdapter{ctrl: ctrl}
	mock.recorder = &MockRepoAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoAdapter) EXPECT() *MockRepoAdapterMockRecorder {
	return m.recorder
}

// CheckExistence mocks base method
func (m *MockRepoAdapter) CheckExistence(arg0 context.Context, arg1, arg2 types.Code) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistence", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckExistence indicates an expected call of CheckExistence
func (mr *MockRepoAdapterMockRecorder) CheckExistence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistence", reflect.TypeOf((*MockRepoAdapter)(nil).CheckExistence), arg0, arg1, arg2)
}
